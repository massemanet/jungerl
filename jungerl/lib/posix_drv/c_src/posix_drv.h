/*
** Copyright (c) 2003, Scott Lystig Fritchie.  All rights reserved.
** See the file "../LICENSE" for license details.
**
** NOTICE: This file was generated by the tools of the Erlang Driver
**         toolkit.  Do not edit this file by hand unless you know
**         what you're doing!
**
*/

#ifndef __POSIX_DRV_H
#define __POSIX_DRV_H

#ifdef   DRIVER_USING_PTHREADS
#include <pthread.h>
#endif   /* DRIVER_USING_PTHREADS */

/*
** Driver<->emulator communication codes (xref with top of posix_drv.hrl)
*/

#define _DEBUG                          0
#define _GETGID                         1
#define _GETEGID                        2
#define _GETGRNAM                       3
#define _GETGRGID                       4
#define _GETGROUPS                      5
#define _GETPWNAM                       6
#define _GETPWUID                       7
#define _GETUID                         8
#define _GETEUID                        9
#define _GETLOGIN                       10
#define _GETPGRP                        11
#define _GETPPID                        12
#define _GETSID                         13
#define _KILL                           14
#define _LSTAT                          15
#define _MKFIFO                         16
#define _MKNOD                          17
#define _UMASK                          18

/*
** Constants
*/


#define  MAX_BINVS              24      /* QQQ dumb const! */

#define  VALMAP_INUSE           0x01
#define  VALMAP_DELAYED_CLEANUP 0x02

/*
** descriptor_t = general state for the port
**
*/

struct descriptor {
    ErlDrvPort          port;
    unsigned short      nextxid;        /* Call txn ID for very async calls */
};

/*
** callstate_t: asychronous call state
**
** TODO: Fill in the struct members of "i" and "o" below.
*/
typedef struct callstate {
    struct callstate    *next;
    int                 cmd;            /* call/command # */
#define XXXKEY  ((void *) 1)
    unsigned int        *key;           /* Not really used */
    void                (*invoke)(void *);
    void                (*free)(void *);
    unsigned short      xid;            /* Only used by as_control()-
                                           initiated funcs */
    /*
    ** Input & output args use a struct simply for convenient
    ** naming & grouping.  There isn't any attempt to get smart about
    ** using a union or anything like that to avoid bloating the size
    ** of these structs with the combined args of a zillion different
    ** functions.  QQQ For future use: look into the use of unions
    ** and/or different flavors of callstate_t to avoid structure bloat.
    */
    struct {
        char *          name;
        gid_t           gid;
        char *          login;
        uid_t           uid;
        pid_t           pid;
        int             sig;
        char *          path;
        mode_t          mode;
        dev_t           dev;
        mode_t          numask;
    } i;
    struct {
        int             __expect;
        int             __expect_errval;
        gid_t           ret_gid_t; /* XXX 1 */
        struct group *  ret_grptr; /* XXX 1 */
        int             ret_int; /* XXX 1 */
        struct passwd *  ret_pwptr; /* XXX 1 */
        uid_t           ret_uid_t; /* XXX 1 */
        char *          ret_char_p; /* XXX 1 */
        pid_t           ret_pid_t; /* XXX 1 */
        gid_t           gidset[NGROUPS_MAX];
        struct stat     sb;
    } o;
    struct {
    } k;
} callstate_t;

/*
** End of autogenerated code
**  script = ../../edtk/c_h_template.gsl
**  filename = posix.xml
**  gslgen version = 2.000 Beta 1
**  date = 2003/04/22
**  time =  3:53:44
*/

#endif  /* __POSIX_DRV_H */
